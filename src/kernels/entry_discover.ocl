#include "../app_globals.h"

int matrix_to_array_indexes(int i, int j, int row_len) {
	return i * row_len + j;
}

//ricerca delle leaf da cui cominciare la BFS
kernel void entry_discover(const int n_nodes, global edge_t* restrict edges, volatile global int* n_entries, global int* entries)
{
	int i = get_global_id(0);
	if (i >= n_nodes) return;

	//printf("input params for %d -> n_nodes: %d, nodes: %d, edges: %d, n_entries: %d, entries: %d.\n", i, n_nodes, nodes, edges, *n_entries, entries);
#pragma unroll
	for (int j = 0; j < n_nodes; j++) {
		int matrixToArrayIndex;
#if TRANSPOSED_ADJ
		matrixToArrayIndex = matrix_to_array_indexes(i, j, n_nodes);
#else
		matrixToArrayIndex = matrix_to_array_indexes(j, i, n_nodes);
#endif // TRANSPOSED_ADJ
		if (edges[matrixToArrayIndex] != 0) { //per cercare le root invece delle leaf invertire i e j
			return;
		}
	}

	entries[i] = 1;

	//int old_n_entries = atomic_inc(n_entries);  //incremento il puntatore alla lista di entries per essere sicuro che nessuno scriva in quella posizione.
	//atomic_xchg(&entries[old_n_entries], i); //essendo sicuro che la posizione non è stata scritta inserisco il mio dato senza paura di sovrascrivere qualcosa.

	return;
}
